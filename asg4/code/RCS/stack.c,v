head	1.3;
access;
symbols;
locks;
comment	@ * @;


1.3
date	2014.05.28.09.19.40;	author -;	state -;
branches;
next	1.2;

1.2
date	2014.05.28.09.18.23;	author -;	state -;
branches;
next	1.1;

1.1
date	2014.05.28.03.50.24;	author -;	state -;
branches;
next	;


desc
@@


1.3
log
@-
@
text
@// Brad Cardello (bcardell)
// $Id: stack.c,v 1.2 2014-05-28 02:18:23-07 - - $

#include <assert.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#include "stack.h"
#include "debug.h"

#define DEFAULT_CAPACITY 16

struct stack {
   size_t capacity;
   size_t size;
   stack_item *data;
};

stack *new_stack (void) {
   stack *this = malloc (sizeof (stack));
   assert (this != NULL);
   this->capacity = DEFAULT_CAPACITY;
   this->size = 0;
   this->data = calloc (this->capacity, sizeof (stack_item));
   assert (this->data != NULL);
   return this;
}

void free_stack (stack *this) {
   assert (empty_stack (this));
   free (this->data);
   free (this);
}

static bool full_stack (stack *this) {
   return this->size == this->capacity;
}

static void realloc_stack (stack *this) {
   size_t old_capacity = this->capacity;
   this->capacity *= 2;
   this->data = realloc (this->data, this->capacity);
   assert (this->data != NULL);
   memset (this->data + old_capacity, 0, old_capacity);
}


void push_stack (stack *this, stack_item item) {
   if (full_stack (this)) realloc_stack (this);
   DEBUGS ('s', show_stack (this));
   DEBUGF ('s', "item=%p\n", item);
   this->data[this->size] = item;
   ++this->size;
}

stack_item pop_stack (stack *this) {
   assert (! empty_stack (this));
   DEBUGS ('s', show_stack (this));
   --this->size;
   return this->data[this->size];
}

stack_item peek_stack (stack *this, size_t index) {
   assert (index < size_stack (this));
   DEBUGS ('s', show_stack (this));
   return this->data[this->size - 1 - index];
}

bool empty_stack (stack *this) {
   return size_stack (this) == 0;
}

size_t size_stack (stack *this) {
   return this->size;
}

void show_stack (stack *this) {
   fprintf (stderr, "stack@@%p->{%lu,%lu,%p}\n",
            this, this->capacity, this->size, this->data);
}

@


1.2
log
@-
@
text
@d1 2
a2 1
// $Id: stack.c,v 1.12 2014-05-14 18:03:26-07 - - $
@


1.1
log
@-
@
text
@a0 1
// Brad Cardello (bcardell)
a58 1
   stack_item temp = this->data[this->size - 1];
d60 1
a60 1
   return temp;
@
