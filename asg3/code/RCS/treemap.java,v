head	1.45;
access;
symbols;
locks
	bcardell:1.18
	bcardell:1.31;
comment	@# @;


1.45
date	2014.05.13.07.45.58;	author -;	state -;
branches;
next	1.44;

1.44
date	2014.05.13.05.49.20;	author -;	state -;
branches;
next	1.43;

1.43
date	2014.05.13.05.14.38;	author -;	state -;
branches;
next	1.42;

1.42
date	2014.05.13.05.14.14;	author -;	state -;
branches;
next	1.41;

1.41
date	2014.05.13.05.08.59;	author -;	state -;
branches;
next	1.40;

1.40
date	2014.05.13.05.08.21;	author -;	state -;
branches;
next	1.39;

1.39
date	2014.05.13.05.03.49;	author -;	state -;
branches;
next	1.38;

1.38
date	2014.05.13.04.41.36;	author -;	state -;
branches;
next	1.37;

1.37
date	2014.05.13.04.41.16;	author -;	state -;
branches;
next	1.36;

1.36
date	2014.05.13.04.37.30;	author -;	state -;
branches;
next	1.35;

1.35
date	2014.05.13.04.22.14;	author -;	state -;
branches;
next	1.34;

1.34
date	2014.05.13.04.20.46;	author -;	state -;
branches;
next	1.33;

1.33
date	2014.05.13.04.19.04;	author -;	state -;
branches;
next	1.32;

1.32
date	2014.05.13.03.52.04;	author -;	state -;
branches;
next	1.31;

1.31
date	2014.05.13.03.34.24;	author -;	state -;
branches;
next	1.30;

1.30
date	2014.05.13.03.31.57;	author -;	state -;
branches;
next	1.29;

1.29
date	2014.05.13.03.30.14;	author -;	state -;
branches;
next	1.28;

1.28
date	2014.05.13.03.12.12;	author -;	state -;
branches;
next	1.27;

1.27
date	2014.05.13.03.07.38;	author -;	state -;
branches;
next	1.26;

1.26
date	2014.05.13.03.05.11;	author -;	state -;
branches;
next	1.25;

1.25
date	2014.05.13.03.04.41;	author -;	state -;
branches;
next	1.24;

1.24
date	2014.05.13.03.04.02;	author -;	state -;
branches;
next	1.23;

1.23
date	2014.05.13.03.02.31;	author -;	state -;
branches;
next	1.22;

1.22
date	2014.05.13.03.01.55;	author -;	state -;
branches;
next	1.21;

1.21
date	2014.05.13.03.00.25;	author -;	state -;
branches;
next	1.20;

1.20
date	2014.05.13.02.59.22;	author -;	state -;
branches;
next	1.19;

1.19
date	2014.05.13.02.57.56;	author -;	state -;
branches;
next	1.18;

1.18
date	2014.05.13.02.52.39;	author -;	state -;
branches;
next	1.17;

1.17
date	2014.05.13.02.51.57;	author -;	state -;
branches;
next	1.16;

1.16
date	2014.05.13.02.49.57;	author -;	state -;
branches;
next	1.15;

1.15
date	2014.05.13.02.48.58;	author -;	state -;
branches;
next	1.14;

1.14
date	2014.05.13.02.45.52;	author -;	state -;
branches;
next	1.13;

1.13
date	2014.05.13.01.49.39;	author -;	state -;
branches;
next	1.12;

1.12
date	2014.05.13.01.48.29;	author -;	state -;
branches;
next	1.11;

1.11
date	2014.05.13.01.46.04;	author -;	state -;
branches;
next	1.10;

1.10
date	2014.05.12.23.47.30;	author -;	state -;
branches;
next	1.9;

1.9
date	2014.05.12.23.29.16;	author -;	state -;
branches;
next	1.8;

1.8
date	2014.05.11.05.04.00;	author -;	state -;
branches;
next	1.7;

1.7
date	2014.05.11.05.00.06;	author -;	state -;
branches;
next	1.6;

1.6
date	2014.05.11.02.24.41;	author -;	state -;
branches;
next	1.5;

1.5
date	2014.05.09.21.28.39;	author -;	state -;
branches;
next	1.4;

1.4
date	2014.05.09.21.27.43;	author -;	state -;
branches;
next	1.3;

1.3
date	2014.05.09.21.12.57;	author -;	state -;
branches;
next	1.2;

1.2
date	2014.05.09.20.56.27;	author -;	state -;
branches;
next	1.1;

1.1
date	2014.05.08.22.15.22;	author -;	state -;
branches;
next	;


desc
@@


1.45
log
@-
@
text
@// Brad Cardello (bcardell)
// Kara Ekiss (kekiss)
// $Id: treemap.java,v 1.37 2014-05-12 21:41:16-07 - - $

import static java.lang.System.*;

class treemap <key_t extends Comparable <key_t>, value_t> {

   private class node {
      key_t key;
      value_t value;
      node left;
      node right;
   }
   private node root;

   private void debug_dump_rec (node tree, int depth) {
      if (tree.left != null)
         debug_dump_rec (tree.left, depth + 1);
      for (int indent = 0; indent < depth; indent++)
         out.printf ("  ");
      out.printf ("%d %s %s%n", depth, tree.key, tree.value);
      if (tree.right != null)
         debug_dump_rec (tree.right, depth + 1);
   }

   private void do_visit_rec (visitor <key_t, value_t> visit_fn,
                              node tree) {
      if (tree == null) return;
      do_visit_rec (visit_fn, tree.left);
      visit_fn.visit (tree.key, tree.value);
      do_visit_rec (visit_fn, tree.right);
   }

   public value_t get (key_t key) {
      node curr = root;
      while (curr != null) {
         int comp = key.compareTo (curr.key);
         if (comp < 0)
            curr = curr.left;
         else if (comp == 0)
            return curr.value;
         else 
            curr = curr.right;
      }
      return null;
   }

   public value_t put (key_t key, value_t value) {
      node n = new node();
      n.key = key;
      n.value = value;
      n.left = null;
      n.right = null;
      if (root == null) {
         root = n;
         return null;
      }else {
         node curr = root;
         while (curr != null) {
            int comp = key.compareTo (curr.key);
            if (comp < 0) {
               if (curr.left == null) {
                  curr.left = n;
                  break;
               }else {
                  curr = curr.left;
               }
            }else if (comp == 0) {
               value_t tmp = curr.value;
               curr.value = value;
               tmp = value;
               return tmp;
            }else if (comp > 0) {
               if (curr.right == null) {
                  curr.right = n;
                  break;
               }else {
                  curr = curr.right;
               }
            }
         }
      }
      return null;
   }

   public void debug_dump () {
      debug_dump_rec (root, 0);
   }

   public void do_visit (visitor <key_t, value_t> visit_fn) {
      do_visit_rec (visit_fn, root);
   }

}
@


1.44
log
@-
@
text
@d1 2
a2 2
// Brad Cardello
// bcardell
@


1.43
log
@-
@
text
@d1 2
@


1.42
log
@-
@
text
@d70 2
a71 2
               temp = value;
               return temp;
@


1.41
log
@-
@
text
@d68 1
d70 2
a71 1
               return curr.value;
@


1.40
log
@-
@
text
@a54 1
         out.printf("This was null");
@


1.39
log
@-
@
text
@a52 1
      root = n;
a68 3
               // Push new value onto queue
               // 
               // Return old value
@


1.38
log
@-
@
text
@d48 6
d55 1
a55 6
         node newroot = new node();
         newroot.key = key;
         newroot.value = value;
         //newroot.left = null;
         //newroot.right = null;
         root = newroot;
d57 1
a57 1
         return root.value;
d64 3
a66 6
                  node leftnode = new node();
                  leftnode.key = key;
                  leftnode.value = value;
                  leftnode.left = null;
                  leftnode.right = null;
                  curr.left = leftnode;
a67 4
                  return curr.value;
               }else {
                  curr.left.value = value;   //might give errors
                  return curr.left.value;
a72 1
               value_t oldvalue = curr.value;
d74 1
a74 1
               return oldvalue;
d77 3
a79 6
                  node rightnode = new node();
                  rightnode.key = key;
                  rightnode.value = value;
                  rightnode.left = null;
                  rightnode.right = null;
                  curr.right = rightnode;
a80 4
                  return curr.value;
               }else {
                  curr.right.value = value;
                  return curr.left.value;
@


1.37
log
@-
@
text
@d1 1
a1 1
// $Id: treemap.java,v 1.18 2014/05/13 02:52:39 - - $
d99 1
a99 1
      //return null;
@


1.36
log
@-
@
text
@d1 1
a1 1
// $Id: treemap.java,v 1.31 2014/05/13 03:34:24 - - bcardell $
a47 1
      value_t newvalue = null;
d52 2
a53 3
         newroot.left = null;
         newroot.right = null;
         newvalue = newroot.value;
d56 2
a57 2
         return newvalue;
      }else if (root != null) {
d70 1
a70 1
                  newvalue = curr.value;
d73 1
a73 1
                  newvalue = curr.left.value;
d81 1
a81 2
               newvalue = oldvalue;
               //return oldvalue;
d91 1
a91 1
                  newvalue = curr.value;
d94 1
a94 1
                  newvalue = curr.left.value;
d99 1
a99 1
      return newvalue;
@


1.35
log
@-
@
text
@d1 1
a1 1
// $Id: treemap.java,v 1.8 2014-05-10 22:04:00-07 - - $
d49 50
a98 42
      boolean l = false;
      node parent;
      node curr = root;
      while (curr != null) {
         int comp = key.compareTo (curr.key);
         if (comp < 0) {
            l = true;
            if (curr.left == null) {
               node leftnode = new node();
               leftnode.key = key;
               leftnode.value = value;
               leftnode.left = null;
               leftnode.right = null;
               curr.left = leftnode;
               curr = curr.left;
               newvalue = curr.value;
            }else {
               curr.left.value = value;   //might give errors
               newvalue = curr.left.value;
            }
         }else if (comp == 0) {
            // Push new value onto queue
            // 
            // Return old value
            value_t oldvalue = curr.value;
            curr.value = value;
            newvalue = oldvalue;
            //return oldvalue
         }else if (comp > 0) {
            l = false;
            if (curr.right == null) {
               node rightnode = new node();
               rightnode.key = key;
               rightnode.value = value;
               rightnode.left = null;
               rightnode.right = null;
               curr.right = rightnode;
               curr = curr.right;
               newvalue = curr.value;
            }else {
               curr.right.value = value;
               newvalue = curr.left.value;
a100 11
         node newnode = new node();
         newnode.key = key;
         newnode.value = value;
         newnode.left = null;
         newnode.right = null;
         if (root == null)
            root = newnode;
         else if (l == true)
            parent.left = newnode;
         else
            parent.right = newnode;
@


1.34
log
@-
@
text
@d49 1
a49 1
      boolean l;
@


1.33
log
@-
@
text
@d93 11
a104 11
      node newnode = new node();
      newnode.key = key;
      newnode.value = value;
      newnode.left = null;
      newnode.right = null;
      if (root == null)
         root = newnode;
      else if (l == true)
         parent.left = newnode;
      else
         parent.right = newnode;
@


1.32
log
@-
@
text
@d50 1
a69 1
            l = false;
d94 11
a104 3
      if (root == null) {
         
      }
@


1.31
log
@-
@
text
@d49 42
a90 50
      if (root == null) {
         node newroot = new node();
         newroot.key = key;
         newroot.value = value;
         newroot.left = null;
         newroot.right = null;
         newvalue = newroot.value;
         root = newroot;
         out.printf("This was null");
         return newvalue;
      }else if (root != null) {
         node curr = root;
         while (curr != null) {
            int comp = key.compareTo (curr.key);
            if (comp < 0) {
               if (curr.left == null) {
                  node leftnode = new node();
                  leftnode.key = key;
                  leftnode.value = value;
                  leftnode.left = null;
                  leftnode.right = null;
                  curr.left = leftnode;
                  curr = curr.left;
                  newvalue = curr.value;
               }else {
                  curr.left.value = value;   //might give errors
                  newvalue = curr.left.value;
               }
            }else if (comp == 0) {
               // Push new value onto queue
               // 
               // Return old value
               value_t oldvalue = curr.value;
               curr.value = value;
               newvalue = oldvalue;
               //return oldvalue;
            }else if (comp > 0) {
               if (curr.right == null) {
                  node rightnode = new node();
                  rightnode.key = key;
                  rightnode.value = value;
                  rightnode.left = null;
                  rightnode.right = null;
                  curr.right = rightnode;
                  curr = curr.right;
                  newvalue = curr.value;
               }else {
                  curr.right.value = value;
                  newvalue = curr.left.value;
               }
d94 3
@


1.30
log
@-
@
text
@d58 1
a58 1
         return null;
@


1.29
log
@-
@
text
@d48 1
a48 1
      value_t newvalue;
@


1.28
log
@-
@
text
@d48 2
a49 2
      value_t newvalue = value;
      /*if (root == null) {        // if (root == null)
d55 1
a56 1
         newvalue = root.value;
d59 1
a59 1
      }else if (root != null) {*/
d101 1
@


1.27
log
@-
@
text
@d49 1
a49 1
      if (root == null) {        // if (root == null)
d58 2
a59 2
         return newvalue;
      }else if (root != null) {
a100 1
      }
@


1.26
log
@-
@
text
@d58 1
a58 1
         return null;
@


1.25
log
@-
@
text
@d57 1
a58 1
         out.printf("This was null");
@


1.24
log
@-
@
text
@d58 1
a58 1
         //out.printf("This was null");
@


1.23
log
@-
@
text
@d48 1
a48 1
      value_t newvalue;
@


1.22
log
@-
@
text
@d13 1
a13 1
   private node root = null;
d59 1
a59 1
      }else {
@


1.21
log
@-
@
text
@d13 1
a13 1
   private node root;
@


1.20
log
@-
@
text
@d49 1
a49 1
      if (true) {        // if (root == null)
d57 1
@


1.19
log
@-
@
text
@d49 1
a49 1
      if (root == null) {
@


1.18
log
@-
@
text
@d48 1
d53 2
a54 2
         //newroot.left = null;
         //newroot.right = null;
d56 2
a57 2
         out.printf("This was null");
         return root.value;
d71 1
a71 1
                  return curr.value;
d74 1
a74 1
                  return curr.left.value;
d82 2
a83 1
               return oldvalue;
d93 1
a93 1
                  return curr.value;
d96 1
a96 1
                  return curr.left.value;
d101 1
a101 1
      //return null;
@


1.17
log
@-
@
text
@d99 1
a99 1
      return null;
@


1.16
log
@-
@
text
@d56 1
a56 1
         return null;
@


1.15
log
@-
@
text
@d52 2
a53 2
         newroot.left = null;
         newroot.right = null;
@


1.14
log
@-
@
text
@d55 1
@


1.13
log
@-
@
text
@d16 3
a18 3
      if (tree == null) return;
      debug_dump_rec (tree.left, depth + 1);
      for (int indent = 0; indent < depth; indent++){
a19 1
      }
d21 2
a22 1
      debug_dump_rec (tree.right, depth + 1);
@


1.12
log
@-
@
text
@d85 1
a85 1
                  rightnode.value = value'
d98 1
@


1.11
log
@-
@
text
@a33 3
      ihrow new UnsupportedOperationException ();
id do_visit_rec (visitor <key_t, value_t> visit_fn,

@


1.10
log
@-
@
text
@d34 3
d58 1
a58 1
         return root.value;
d63 36
a98 6
            if (comp < 0)
               curr = curr.left;
            else if (comp == 0)
               return curr.value;
            else
               curr = curr.right;
a100 1
      return null;
@


1.9
log
@-
@
text
@d37 1
a37 1
         if (comp < 0) {
d39 1
a39 2
         }
         else if (comp == 0) {
d41 1
a41 2
         }
         else {
a42 1
         }
d55 12
d68 1
a68 4
      else {
         node oldhead = root;
      while
      throw new UnsupportedOperationException ();
@


1.8
log
@-
@
text
@d1 1
a1 1
// $Id: treemap.java,v 1.1 2014-05-08 15:15:22-07 - - $
d51 11
@


1.7
log
@-
@
text
@d51 1
a51 1
      // WORKING ON THIS
@


1.6
log
@-
@
text
@d51 1
a51 1
      throw new UnsupportedOperationException ();
@


1.5
log
@-
@
text
@d27 4
a30 1
      throw new UnsupportedOperationException ();
@


1.4
log
@-
@
text
@d19 1
a19 1
         printf ("  ");
d21 1
a21 1
      printf ("%d %s %s%n", depth, tree.key, tree.value);
@


1.3
log
@-
@
text
@d43 1
@


1.2
log
@-
@
text
@a22 1
      throw new UnsupportedOperationException ();
d35 1
a35 1
            return curr.left.value;
d41 3
a43 2
            return curr
      throw new UnsupportedOperationException ();
@


1.1
log
@-
@
text
@d1 1
a1 1
// $Id: treemap.java,v 1.1 2014-01-16 17:44:47-08 - - $
d16 7
d32 11
@
